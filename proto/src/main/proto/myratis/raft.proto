syntax = "proto3";
option java_package = "org.example.myratis.proto";
option java_outer_classname = "RaftProtos";
option java_generate_equals_and_hash = true;
package myratis.common;

message RaftPeerIdProto {
  bytes id = 1;      // id of the peer
}

message RaftGroupIdProto {
  bytes id = 1;
}

enum RaftPeerRole {
  LEADER = 0;
  CANDIDATE = 1;
  FOLLOWER = 2;
  LISTENER = 3;
}

message RaftPeerProto {
  bytes id = 1;      // id of the peer
  string address = 2; // e.g. address of the RPC server
  uint32 priority = 3; // priority of the peer
  string dataStreamAddress = 4; // address of the data stream server
  string clientAddress = 5; // address of the client RPC server
  string adminAddress = 6; // address of the admin RPC server
  optional RaftPeerRole startupRole = 7; // peer start up role
}

message RouteProto {
  RaftPeerIdProto peerId = 1;
  repeated RaftPeerIdProto successors = 2;
}

message RoutingTableProto {
  repeated RouteProto routes = 1;
}

message TermIndexProto {
  uint64 term = 1;
  uint64 index = 2;
}

message SlidingWindowEntry {
  uint64 seqNum = 1; // 0 for non-sliding-window requests; >= 1 for sliding-window requests
  bool isFirst = 2;  // Is this the first request of the sliding window?
}

message RaftRpcRequestProto {
  bytes requestorId = 1;
  bytes replyId = 2;
  RaftGroupIdProto raftGroupId = 3;
  uint64 callId = 4;
  bool toLeader = 5;

  uint64 timeoutMs = 13;
  RoutingTableProto routingTable = 14;
  SlidingWindowEntry slidingWindowEntry = 15;
}

message RaftRpcReplyProto {
  bytes requestorId = 1;
  bytes replyId = 2;
  RaftGroupIdProto raftGroupId = 3;
  uint64 callId = 4;

  bool success = 15;
}

message RequestVoteRequestProto {
  RaftRpcRequestProto serverRequest = 1;
  uint64 candidateTerm = 2;
  TermIndexProto candidateLastEntry = 3;
  bool preVote = 4;
}

message RequestVoteReplyProto {
  RaftRpcReplyProto serverReply = 1;
  uint64 term = 2;
  bool shouldShutdown = 3;
}

message StateMachineEntryProto {
  /**
   * StateMachine specific data which is not written to log.
   * Unlike logEntryData, stateMachineData is managed and stored by the StateMachine but not the RaftLog.
   */
  bytes stateMachineData = 1;
  /**
   * When stateMachineData is missing, it is the size of the serialized LogEntryProto along with stateMachineData.
   * When stateMachineData is not missing, it must be set to zero.
   */
  uint32 logEntryProtoSerializedSize = 2;
}

message LogEntryProto {
  uint64 term = 1;
  uint64 index = 2;

  oneof LogEntryBody {
    StateMachineLogEntryProto stateMachineLogEntry = 3;
    RaftConfigurationProto configurationEntry = 4;
    MetadataProto metadataEntry = 5;
  }
}

message RaftConfigurationProto {
  repeated RaftPeerProto peers = 1; // the peers in the current or new conf
  repeated RaftPeerProto oldPeers = 2; // the peers in the old conf
  repeated RaftPeerProto listeners = 3;
  repeated RaftPeerProto oldListeners = 4;
}

message MetadataProto {
  uint64 commitIndex = 1;
}

message StateMachineLogEntryProto {
  // TODO: This is not super efficient if the SM itself uses PB to serialize its own data for a
  /** RaftLog entry data */
  bytes logData = 1;
  /**
   * StateMachine entry.
   * StateMachine implementation may use this field to separate StateMachine specific data from the RaftLog data.
   */
  StateMachineEntryProto stateMachineEntry = 2;

  enum Type {
    WRITE = 0;
    DATASTREAM = 1;
  }

  Type type = 13;
  // clientId and callId are used to rebuild the retry cache.
  bytes clientId = 14;
  uint64 callId = 15;
}

message ClientMessageEntryProto {
  bytes content = 1;
}
// normal client request
message RaftClientRequestProto {
  RaftRpcRequestProto rpcRequest = 1;
  ClientMessageEntryProto message = 2;

  oneof Type {
    WriteRequestTypeProto write = 3;
    ReadRequestTypeProto read = 4;
    MessageStreamRequestTypeProto messageStream = 7;
    DataStreamRequestTypeProto dataStream = 8;
    ForwardRequestTypeProto forward = 9;
  }
}

message WriteRequestTypeProto {
}

message MessageStreamRequestTypeProto {
  uint64 streamId = 1;  // the id of this stream
  uint64 messageId = 2; // the message id within a particular stream.
  bool endOfRequest = 3;// Is this the end-of-request?
}

message DataStreamRequestTypeProto {
}

message ForwardRequestTypeProto {
}

message ReadRequestTypeProto {
  bool preferNonLinearizable = 1;
}
